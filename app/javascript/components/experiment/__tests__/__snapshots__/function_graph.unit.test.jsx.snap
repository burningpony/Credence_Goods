// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component displays 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FunctionGraph
    func="sin(x)"
    maxX={2}
    maxY={2}
    minX={-2}
    minY={-2}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <ScatterChart
          barCategoryGap="10%"
          barGap={4}
          height={400}
          layout="horizontal"
          margin={
            Object {
              "bottom": 20,
              "left": 20,
              "right": 20,
              "top": 20,
            }
          }
          reverseStackOrder={false}
          stackOffset="none"
          width={400}
        >
          <Scatter
            animationBegin={0}
            animationDuration={400}
            animationEasing="linear"
            data={Array []}
            fill="#8884d8"
            hide={false}
            isAnimationActive={true}
            legendType="circle"
            lineJointType="linear"
            lineType="joint"
            name="A school"
            shape="circle"
            xAxisId={0}
            yAxisId={0}
            zAxisId={0}
          />
          <XAxis
            allowDataOverflow={false}
            allowDecimals={true}
            allowDuplicatedCategory={true}
            dataKey="x"
            domain={
              Array [
                0,
                "auto",
              ]
            }
            height={30}
            hide={false}
            mirror={false}
            orientation="bottom"
            padding={
              Object {
                "left": 0,
                "right": 0,
              }
            }
            reversed={false}
            scale="auto"
            tick={false}
            tickCount={5}
            type="number"
            width={0}
            xAxisId={0}
          />
          <YAxis
            allowDataOverflow={false}
            allowDecimals={true}
            allowDuplicatedCategory={true}
            dataKey="y"
            domain={
              Array [
                0,
                "auto",
              ]
            }
            height={0}
            hide={false}
            mirror={false}
            orientation="left"
            padding={
              Object {
                "bottom": 0,
                "top": 0,
              }
            }
            reversed={false}
            scale="auto"
            tick={false}
            tickCount={5}
            type="number"
            width={60}
            yAxisId={0}
          />
          <CartesianGrid
            fill="none"
            horizontal={true}
            horizontalFill={Array []}
            horizontalPoints={Array []}
            stroke="#ccc"
            vertical={true}
            verticalFill={Array []}
            verticalPoints={Array []}
            verticle={true}
          />
        </ScatterChart>,
        <div>
          <ValueCoordinate
            callback={[Function]}
            costOfCoordinate={2.33}
            func={[Function]}
          />
          <SamplePoints
            callback={[Function]}
            costOfCoordinate={2.33}
            func={[Function]}
          />
          <h3>
            Cost:
             
            <small>
              
            </small>
          </h3>
          <MaxValuePrediction />
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "barCategoryGap": "10%",
          "barGap": 4,
          "children": Array [
            <Scatter
              animationBegin={0}
              animationDuration={400}
              animationEasing="linear"
              data={Array []}
              fill="#8884d8"
              hide={false}
              isAnimationActive={true}
              legendType="circle"
              lineJointType="linear"
              lineType="joint"
              name="A school"
              shape="circle"
              xAxisId={0}
              yAxisId={0}
              zAxisId={0}
            />,
            <XAxis
              allowDataOverflow={false}
              allowDecimals={true}
              allowDuplicatedCategory={true}
              dataKey="x"
              domain={
                Array [
                  0,
                  "auto",
                ]
              }
              height={30}
              hide={false}
              mirror={false}
              orientation="bottom"
              padding={
                Object {
                  "left": 0,
                  "right": 0,
                }
              }
              reversed={false}
              scale="auto"
              tick={false}
              tickCount={5}
              type="number"
              width={0}
              xAxisId={0}
            />,
            <YAxis
              allowDataOverflow={false}
              allowDecimals={true}
              allowDuplicatedCategory={true}
              dataKey="y"
              domain={
                Array [
                  0,
                  "auto",
                ]
              }
              height={0}
              hide={false}
              mirror={false}
              orientation="left"
              padding={
                Object {
                  "bottom": 0,
                  "top": 0,
                }
              }
              reversed={false}
              scale="auto"
              tick={false}
              tickCount={5}
              type="number"
              width={60}
              yAxisId={0}
            />,
            <CartesianGrid
              fill="none"
              horizontal={true}
              horizontalFill={Array []}
              horizontalPoints={Array []}
              stroke="#ccc"
              vertical={true}
              verticalFill={Array []}
              verticalPoints={Array []}
              verticle={true}
            />,
          ],
          "height": 400,
          "layout": "horizontal",
          "margin": Object {
            "bottom": 20,
            "left": 20,
            "right": 20,
            "top": 20,
          },
          "reverseStackOrder": false,
          "stackOffset": "none",
          "width": 400,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "animationBegin": 0,
              "animationDuration": 400,
              "animationEasing": "linear",
              "data": Array [],
              "fill": "#8884d8",
              "hide": false,
              "isAnimationActive": true,
              "legendType": "circle",
              "lineJointType": "linear",
              "lineType": "joint",
              "name": "A school",
              "shape": "circle",
              "xAxisId": 0,
              "yAxisId": 0,
              "zAxisId": 0,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowDataOverflow": false,
              "allowDecimals": true,
              "allowDuplicatedCategory": true,
              "dataKey": "x",
              "domain": Array [
                0,
                "auto",
              ],
              "height": 30,
              "hide": false,
              "mirror": false,
              "orientation": "bottom",
              "padding": Object {
                "left": 0,
                "right": 0,
              },
              "reversed": false,
              "scale": "auto",
              "tick": false,
              "tickCount": 5,
              "type": "number",
              "width": 0,
              "xAxisId": 0,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "allowDataOverflow": false,
              "allowDecimals": true,
              "allowDuplicatedCategory": true,
              "dataKey": "y",
              "domain": Array [
                0,
                "auto",
              ],
              "height": 0,
              "hide": false,
              "mirror": false,
              "orientation": "left",
              "padding": Object {
                "bottom": 0,
                "top": 0,
              },
              "reversed": false,
              "scale": "auto",
              "tick": false,
              "tickCount": 5,
              "type": "number",
              "width": 60,
              "yAxisId": 0,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "fill": "none",
              "horizontal": true,
              "horizontalFill": Array [],
              "horizontalPoints": Array [],
              "stroke": "#ccc",
              "vertical": true,
              "verticalFill": Array [],
              "verticalPoints": Array [],
              "verticle": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <ValueCoordinate
              callback={[Function]}
              costOfCoordinate={2.33}
              func={[Function]}
            />,
            <SamplePoints
              callback={[Function]}
              costOfCoordinate={2.33}
              func={[Function]}
            />,
            <h3>
              Cost:
               
              <small>
                
              </small>
            </h3>,
            <MaxValuePrediction />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "callback": [Function],
              "costOfCoordinate": 2.33,
              "func": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "callback": [Function],
              "costOfCoordinate": 2.33,
              "func": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Cost:",
                " ",
                <small>
                  
                </small>,
              ],
            },
            "ref": null,
            "rendered": Array [
              "Cost:",
              " ",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                },
                "ref": null,
                "rendered": "",
                "type": "small",
              },
            ],
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <ScatterChart
            barCategoryGap="10%"
            barGap={4}
            height={400}
            layout="horizontal"
            margin={
              Object {
                "bottom": 20,
                "left": 20,
                "right": 20,
                "top": 20,
              }
            }
            reverseStackOrder={false}
            stackOffset="none"
            width={400}
          >
            <Scatter
              animationBegin={0}
              animationDuration={400}
              animationEasing="linear"
              data={Array []}
              fill="#8884d8"
              hide={false}
              isAnimationActive={true}
              legendType="circle"
              lineJointType="linear"
              lineType="joint"
              name="A school"
              shape="circle"
              xAxisId={0}
              yAxisId={0}
              zAxisId={0}
            />
            <XAxis
              allowDataOverflow={false}
              allowDecimals={true}
              allowDuplicatedCategory={true}
              dataKey="x"
              domain={
                Array [
                  0,
                  "auto",
                ]
              }
              height={30}
              hide={false}
              mirror={false}
              orientation="bottom"
              padding={
                Object {
                  "left": 0,
                  "right": 0,
                }
              }
              reversed={false}
              scale="auto"
              tick={false}
              tickCount={5}
              type="number"
              width={0}
              xAxisId={0}
            />
            <YAxis
              allowDataOverflow={false}
              allowDecimals={true}
              allowDuplicatedCategory={true}
              dataKey="y"
              domain={
                Array [
                  0,
                  "auto",
                ]
              }
              height={0}
              hide={false}
              mirror={false}
              orientation="left"
              padding={
                Object {
                  "bottom": 0,
                  "top": 0,
                }
              }
              reversed={false}
              scale="auto"
              tick={false}
              tickCount={5}
              type="number"
              width={60}
              yAxisId={0}
            />
            <CartesianGrid
              fill="none"
              horizontal={true}
              horizontalFill={Array []}
              horizontalPoints={Array []}
              stroke="#ccc"
              vertical={true}
              verticalFill={Array []}
              verticalPoints={Array []}
              verticle={true}
            />
          </ScatterChart>,
          <div>
            <ValueCoordinate
              callback={[Function]}
              costOfCoordinate={2.33}
              func={[Function]}
            />
            <SamplePoints
              callback={[Function]}
              costOfCoordinate={2.33}
              func={[Function]}
            />
            <h3>
              Cost:
               
              <small>
                
              </small>
            </h3>
            <MaxValuePrediction />
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "barCategoryGap": "10%",
            "barGap": 4,
            "children": Array [
              <Scatter
                animationBegin={0}
                animationDuration={400}
                animationEasing="linear"
                data={Array []}
                fill="#8884d8"
                hide={false}
                isAnimationActive={true}
                legendType="circle"
                lineJointType="linear"
                lineType="joint"
                name="A school"
                shape="circle"
                xAxisId={0}
                yAxisId={0}
                zAxisId={0}
              />,
              <XAxis
                allowDataOverflow={false}
                allowDecimals={true}
                allowDuplicatedCategory={true}
                dataKey="x"
                domain={
                  Array [
                    0,
                    "auto",
                  ]
                }
                height={30}
                hide={false}
                mirror={false}
                orientation="bottom"
                padding={
                  Object {
                    "left": 0,
                    "right": 0,
                  }
                }
                reversed={false}
                scale="auto"
                tick={false}
                tickCount={5}
                type="number"
                width={0}
                xAxisId={0}
              />,
              <YAxis
                allowDataOverflow={false}
                allowDecimals={true}
                allowDuplicatedCategory={true}
                dataKey="y"
                domain={
                  Array [
                    0,
                    "auto",
                  ]
                }
                height={0}
                hide={false}
                mirror={false}
                orientation="left"
                padding={
                  Object {
                    "bottom": 0,
                    "top": 0,
                  }
                }
                reversed={false}
                scale="auto"
                tick={false}
                tickCount={5}
                type="number"
                width={60}
                yAxisId={0}
              />,
              <CartesianGrid
                fill="none"
                horizontal={true}
                horizontalFill={Array []}
                horizontalPoints={Array []}
                stroke="#ccc"
                vertical={true}
                verticalFill={Array []}
                verticalPoints={Array []}
                verticle={true}
              />,
            ],
            "height": 400,
            "layout": "horizontal",
            "margin": Object {
              "bottom": 20,
              "left": 20,
              "right": 20,
              "top": 20,
            },
            "reverseStackOrder": false,
            "stackOffset": "none",
            "width": 400,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "animationBegin": 0,
                "animationDuration": 400,
                "animationEasing": "linear",
                "data": Array [],
                "fill": "#8884d8",
                "hide": false,
                "isAnimationActive": true,
                "legendType": "circle",
                "lineJointType": "linear",
                "lineType": "joint",
                "name": "A school",
                "shape": "circle",
                "xAxisId": 0,
                "yAxisId": 0,
                "zAxisId": 0,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowDataOverflow": false,
                "allowDecimals": true,
                "allowDuplicatedCategory": true,
                "dataKey": "x",
                "domain": Array [
                  0,
                  "auto",
                ],
                "height": 30,
                "hide": false,
                "mirror": false,
                "orientation": "bottom",
                "padding": Object {
                  "left": 0,
                  "right": 0,
                },
                "reversed": false,
                "scale": "auto",
                "tick": false,
                "tickCount": 5,
                "type": "number",
                "width": 0,
                "xAxisId": 0,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "allowDataOverflow": false,
                "allowDecimals": true,
                "allowDuplicatedCategory": true,
                "dataKey": "y",
                "domain": Array [
                  0,
                  "auto",
                ],
                "height": 0,
                "hide": false,
                "mirror": false,
                "orientation": "left",
                "padding": Object {
                  "bottom": 0,
                  "top": 0,
                },
                "reversed": false,
                "scale": "auto",
                "tick": false,
                "tickCount": 5,
                "type": "number",
                "width": 60,
                "yAxisId": 0,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "fill": "none",
                "horizontal": true,
                "horizontalFill": Array [],
                "horizontalPoints": Array [],
                "stroke": "#ccc",
                "vertical": true,
                "verticalFill": Array [],
                "verticalPoints": Array [],
                "verticle": true,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <ValueCoordinate
                callback={[Function]}
                costOfCoordinate={2.33}
                func={[Function]}
              />,
              <SamplePoints
                callback={[Function]}
                costOfCoordinate={2.33}
                func={[Function]}
              />,
              <h3>
                Cost:
                 
                <small>
                  
                </small>
              </h3>,
              <MaxValuePrediction />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "callback": [Function],
                "costOfCoordinate": 2.33,
                "func": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "callback": [Function],
                "costOfCoordinate": 2.33,
                "func": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Cost:",
                  " ",
                  <small>
                    
                  </small>,
                ],
              },
              "ref": null,
              "rendered": Array [
                "Cost:",
                " ",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "",
                  },
                  "ref": null,
                  "rendered": "",
                  "type": "small",
                },
              ],
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
